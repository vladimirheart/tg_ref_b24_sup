import logging
import sqlite3
import datetime
import json
import os
import uuid
import re
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from apscheduler.schedulers.background import BackgroundScheduler
from config import TELEGRAM_BOT_TOKEN, DB_PATH, GROUP_CHAT_ID, load_settings

TOKEN = TELEGRAM_BOT_TOKEN

ATTACHMENTS_DIR = "attachments"
os.makedirs(ATTACHMENTS_DIR, exist_ok=True)

# --- –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–∫–∞—Ü–∏–π ---
def load_locations():
    try:
        with open("locations.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ locations.json: {e}")
        return {}

LOCATIONS = load_locations()
BUSINESS_OPTIONS = list(LOCATIONS.keys())
SETTINGS = load_settings()

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard_with_back(options, has_back=True, has_cancel=True):
    buttons = [[opt] for opt in options]
    row = []
    if has_back:
        row.append("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    if has_cancel:
        row.append("üö´ –û—Ç–º–µ–Ω–∞")
    if row:
        buttons.append(row)
    return ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)

# --- –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS tickets (
                user_id INTEGER,
                group_msg_id INTEGER,
                status TEXT DEFAULT 'pending',
                resolved_at TEXT,
                resolved_by TEXT,
                ticket_id TEXT UNIQUE,
                PRIMARY KEY (user_id, ticket_id)
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                group_msg_id INTEGER PRIMARY KEY,
                user_id INTEGER,
                business TEXT,
                location_type TEXT,
                city TEXT,
                location_name TEXT,
                problem TEXT,
                created_at TEXT,
                username TEXT DEFAULT '',
                category TEXT,
                ticket_id TEXT UNIQUE,
                created_date TEXT,
                created_time TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS chat_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                sender TEXT,
                message TEXT,
                timestamp TEXT,
                ticket_id TEXT,
                message_type TEXT,
                attachment TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS feedbacks (
                user_id INTEGER,
                rating INTEGER,
                timestamp TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS client_statuses (
                user_id INTEGER PRIMARY KEY,
                status TEXT DEFAULT '–ù–µ —É–∫–∞–∑–∞–Ω',
                updated_at TEXT,
                updated_by TEXT
            )
        """)

init_db()
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
BUSINESS, LOCATION_TYPE, CITY, LOCATION_NAME, PROBLEM = range(5)
PREV_STEP = -1

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    user = update.effective_user

    with sqlite3.connect(DB_PATH) as conn:
        active = conn.execute(
            "SELECT 1 FROM tickets WHERE user_id = ? AND status = 'pending'",
            (user.id,),
        ).fetchone()
    if active:
        await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        return ConversationHandler.END

    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü\n–ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É.")
    await update.message.reply_text(
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å:",
        reply_markup=get_keyboard_with_back(BUSINESS_OPTIONS, has_back=False),
    )
    return BUSINESS

# --- /tickets - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ ---
async def tickets_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    with sqlite3.connect(DB_PATH) as conn:
        closed_tickets = conn.execute(
            "SELECT ticket_id, status, resolved_at FROM tickets WHERE user_id = ? ORDER BY resolved_at DESC LIMIT 5", 
            (user.id,)
        ).fetchall()

    if closed_tickets:
        ticket_list = "\n".join([f"ID: {ticket[0]} - –°—Ç–∞—Ç—É—Å: {ticket[1]} - –ó–∞–∫—Ä—ã—Ç–∞: {ticket[2][:10] if ticket[2] else 'N/A'}" for ticket in closed_tickets])
        await update.message.reply_text(f"üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n{ticket_list}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")

# --- –≤—ã–±–æ—Ä –±–∏–∑–Ω–µ—Å–∞ ---
async def business_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await start(update, context)

    if text == "üö´ –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    if text not in BUSINESS_OPTIONS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å:", reply_markup=get_keyboard_with_back(BUSINESS_OPTIONS, has_back=False))
        return BUSINESS

    context.user_data['business'] = text
    location_type_options = list(LOCATIONS[text].keys())
    context.user_data['location_type_options'] = location_type_options
    await update.message.reply_text(
        "2Ô∏è‚É£ –¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏:",
        reply_markup=get_keyboard_with_back(location_type_options)
    )
    return LOCATION_TYPE

# --- –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏ ---
async def location_type_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å:",
            reply_markup=get_keyboard_with_back(BUSINESS_OPTIONS, has_back=False)
        )
        return BUSINESS

    if text == "üö´ –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if text not in context.user_data.get('location_type_options', []):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_keyboard_with_back(context.user_data.get('location_type_options', []), has_back=False)
        )
        return LOCATION_TYPE

    context.user_data['location_type'] = text
    business = context.user_data['business']
    loc_type = context.user_data['location_type']

    try:
        cities = list(LOCATIONS[business][loc_type].keys())
        await update.message.reply_text(
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_keyboard_with_back(cities)
        )
        return CITY
    except KeyError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return ConversationHandler.END

# --- –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ ---
async def city_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "2Ô∏è‚É£ –¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_keyboard_with_back(context.user_data.get('location_type_options', []))
        )
        return LOCATION_TYPE

    if text == "üö´ –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    business = context.user_data['business']
    loc_type = context.user_data['location_type']

    if text not in LOCATIONS.get(business, {}).get(loc_type, {}):
        cities = list(LOCATIONS[business][loc_type].keys())
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_keyboard_with_back(cities, has_back=False))
        return CITY

    context.user_data['city'] = text
    locations = LOCATIONS[business][loc_type][text]
    await update.message.reply_text(
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=get_keyboard_with_back(locations)
    )
    return LOCATION_NAME

# --- –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ ---
async def location_name_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        business = context.user_data['business']
        loc_type = context.user_data['location_type']
        cities = list(LOCATIONS[business][loc_type].keys())
        await update.message.reply_text(
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_keyboard_with_back(cities)
        )
        return CITY

    if text == "üö´ –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    business = context.user_data['business']
    loc_type = context.user_data['location_type']
    city = context.user_data['city']
    locations = LOCATIONS[business][loc_type][city]

    if text not in locations:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=get_keyboard_with_back(locations, has_back=False))
        return LOCATION_NAME

    context.user_data['location_name'] = text
    await update.message.reply_text("5Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=get_keyboard_with_back([], has_back=True, has_cancel=True))
    return PROBLEM

# --- –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ---
async def problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        business = context.user_data['business']
        loc_type = context.user_data['location_type']
        city = context.user_data['city']
        locations = LOCATIONS[business][loc_type][city]
        await update.message.reply_text(
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=get_keyboard_with_back(locations)
        )
        return LOCATION_NAME

    if text == "üö´ –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    if context.user_data.get('in_progress'):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É.")
        return ConversationHandler.END

    context.user_data['in_progress'] = True
    context.user_data['problem'] = text
    user = update.effective_user
    username = user.username or ""

    ticket_id = str(uuid.uuid4())[:8]
    context.user_data['ticket_id'] = ticket_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.datetime.now()
    created_at = now.isoformat()
    created_date = now.strftime('%Y-%m-%d')
    created_time = now.strftime('%H:%M')

    full_message = (
        f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}</b>\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username} (ID: <code>{user.id}</code>)\n"
        f"üè¢ <b>–ë–∏–∑–Ω–µ—Å:</b> {context.user_data['business']}\n"
        f"üìç <b>–¢–∏–ø:</b> {context.user_data['location_type']}\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {context.user_data['city']}\n"
        f"üè™ <b>–õ–æ–∫–∞—Ü–∏—è:</b> {context.user_data['location_name']}\n"
        f"üìù <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {context.user_data['problem']}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    )

    try:
        sent = await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=full_message,
            parse_mode='HTML'
        )

        with sqlite3.connect(DB_PATH) as conn:
            conn.execute(
                "INSERT INTO tickets (user_id, group_msg_id, status, ticket_id) VALUES (?, ?, ?, ?)",
                (user.id, sent.message_id, "pending", ticket_id)
            )
            conn.execute(
                "INSERT INTO messages (group_msg_id, user_id, business, location_type, city, location_name, problem, created_at, username, ticket_id, created_date, created_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (sent.message_id, user.id, context.user_data['business'], context.user_data['location_type'],
                 context.user_data['city'], context.user_data['location_name'], context.user_data['problem'],
                 created_at, username, ticket_id, created_date, created_time)
            )
            conn.execute(
                "INSERT INTO chat_history (user_id, sender, message, timestamp, ticket_id) VALUES (?, ?, ?, ?, ?)",
                (user.id, "user", context.user_data['problem'], created_at, ticket_id)
            )
            conn.commit()

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    finally:
        context.user_data.clear()

    return ConversationHandler.END

# --- –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message.reply_to_message:
        return
    replied = message.reply_to_message
    if replied.from_user.id != context.bot.id:
        return

    match = re.search(r"ID: <code>(\d+)</code>", replied.text)
    if not match:
        return
    user_id = int(match.group(1))

    admin = update.effective_user
    admin_name = f"@{admin.username}" if admin.username else admin.first_name
    reply_text = f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ({admin_name}):</b>\n\n{message.text}"

    try:
        await context.bot.send_message(chat_id=user_id, text=reply_text, parse_mode="HTML")
        with sqlite3.connect(DB_PATH) as conn:
            ticket_id = conn.execute(
                "SELECT ticket_id FROM tickets WHERE user_id = ? ORDER BY ROWID DESC LIMIT 1",
                (user_id,),
            ).fetchone()
            ticket_id = ticket_id[0] if ticket_id else "unknown"
            conn.execute(
                "INSERT INTO chat_history (user_id, sender, message, timestamp, ticket_id, message_type, attachment) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, "support", message.text, datetime.datetime.now().isoformat(), ticket_id, "text", None),
            )
            conn.commit()
        await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(DB_PATH) as conn:
        total = conn.execute("SELECT COUNT(*) FROM tickets").fetchone()[0]
        resolved = conn.execute("SELECT COUNT(*) FROM tickets WHERE status = 'resolved'").fetchone()[0]
        pending_count = total - resolved
    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üì¨ –í—Å–µ–≥–æ: <b>{total}</b>\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ: <b>{resolved}</b>\n"
        f"‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{pending_count}</b>",
        parse_mode="HTML",
    )

async def pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(DB_PATH) as conn:
        rows = conn.execute("""
            SELECT t.user_id, t.ticket_id, m.problem 
            FROM tickets t 
            JOIN messages m ON t.ticket_id = m.ticket_id 
            WHERE t.status = 'pending'
        """).fetchall()
    
    if not rows:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return
    
    text = "üì¨ <b>–ó–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b>\n\n"
    for user_id, ticket_id, problem in rows:
        text += f"‚Ä¢ ID: {ticket_id} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n–ü—Ä–æ–±–ª–µ–º–∞: {problem[:50]}...\n\n"
    
    await update.message.reply_text(text, parse_mode="HTML")

async def my_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin = update.effective_user
    admin_name = f"@{admin.username}" if admin.username else admin.first_name
    with sqlite3.connect(DB_PATH) as conn:
        rows = conn.execute("SELECT COUNT(*) FROM tickets WHERE resolved_by = ?", (admin_name,)).fetchone()
    count = rows[0] if rows else 0
    await update.message.reply_text(
        f"üõ† –í—ã –∑–∞–∫—Ä—ã–ª–∏ <b>{count}</b> –∑–∞—è–≤–æ–∫.",
        parse_mode="HTML",
    )

# --- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def save_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text

    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute(
            "SELECT ticket_id FROM tickets WHERE user_id = ? AND status = 'pending' ORDER BY ROWID DESC LIMIT 1",
            (user.id,)
        ).fetchone()

    if not row:
        return

    ticket_id = row[0]
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.execute(
                "INSERT INTO chat_history (user_id, sender, message, timestamp, ticket_id, message_type, attachment) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user.id, "user", message, datetime.datetime.now().isoformat(), ticket_id, "text", None)
            )
            conn.commit()
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
# --- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ ---
async def save_user_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message

    # –ü–æ–ª—É—á–∞–µ–º ticket_id –∏–∑ user_data
    ticket_id = context.user_data.get("ticket_id")
    if not ticket_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return

    timestamp = datetime.datetime.now().isoformat()
    attachment_path = None
    message_type = None
    text = message.caption or ""

    os.makedirs(os.path.join(ATTACHMENTS_DIR, ticket_id), exist_ok=True)

    try:
        if message.photo:
            message_type = "photo"
            file = await message.photo[-1].get_file()
            attachment_path = os.path.join(ATTACHMENTS_DIR, ticket_id, f"{file.file_id}.jpg")
            await file.download_to_drive(attachment_path)
        elif message.voice:
            message_type = "voice"
            file = await message.voice.get_file()
            attachment_path = os.path.join(ATTACHMENTS_DIR, ticket_id, f"{file.file_id}.ogg")
            await file.download_to_drive(attachment_path)
        elif message.video:
            message_type = "video"
            file = await message.video.get_file()
            attachment_path = os.path.join(ATTACHMENTS_DIR, ticket_id, f"{file.file_id}.mp4")
            await file.download_to_drive(attachment_path)
        elif message.document:
            message_type = "document"
            file = await message.document.get_file()
            filename = message.document.file_name or f"{file.file_id}"
            attachment_path = os.path.join(ATTACHMENTS_DIR, ticket_id, filename)
            await file.download_to_drive(attachment_path)
        else:
            return

        with sqlite3.connect(DB_PATH) as conn:
            conn.execute(
                "INSERT INTO chat_history (user_id, sender, message, timestamp, ticket_id, message_type, attachment) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user.id, "user", text, timestamp, ticket_id, message_type, attachment_path)
            )
            conn.commit()

        await update.message.reply_text("‚úÖ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        logging.info(f"–ú–µ–¥–∏–∞ –æ—Ç {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")

# --- –æ—Ü–µ–Ω–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rating = update.message.text
    if rating in ["1", "2", "3", "4", "5"]:
        with sqlite3.connect(DB_PATH) as conn:
            conn.execute(
                "INSERT INTO feedbacks (user_id, rating, timestamp) VALUES (?, ?, ?)",
                (user_id, int(rating), datetime.datetime.now().isoformat()),
            )
            conn.commit()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üôè", reply_markup=ReplyKeyboardRemove())

# --- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ---
def auto_close_inactive():
    with sqlite3.connect(DB_PATH) as conn:
        hours = SETTINGS.get("auto_close_hours", 24)
        cutoff = datetime.datetime.now() - datetime.timedelta(hours=hours)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        inactive_tickets = conn.execute("""
            SELECT t.user_id, t.ticket_id 
            FROM tickets t
            WHERE t.status = 'pending' 
            AND t.ticket_id NOT IN (
                SELECT DISTINCT ticket_id 
                FROM chat_history 
                WHERE timestamp > ?
            )
        """, (cutoff.isoformat(),)).fetchall()
        
        for user_id, ticket_id in inactive_tickets:
            conn.execute(
                "UPDATE tickets SET status = 'resolved', resolved_at = ?, resolved_by = '–ê–≤—Ç–æ-—Å–∏—Å—Ç–µ–º–∞' WHERE ticket_id = ?",
                (datetime.datetime.now().isoformat(), ticket_id),
            )
            logging.info(f"–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ {ticket_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        conn.commit()

# --- –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            BUSINESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_choice)],
            LOCATION_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_type_choice)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_choice)],
            LOCATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_name_choice)],
            PROBLEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, problem_description),
                MessageHandler(filters.PHOTO | filters.VOICE | filters.VIDEO | filters.Document.ALL, save_user_media)
            ],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: u.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()) or ConversationHandler.END)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("tickets", tickets_command))
    app.add_handler(MessageHandler(filters.REPLY & filters.Chat(GROUP_CHAT_ID), reply_to_user))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("pending", pending))
    app.add_handler(CommandHandler("my", my_tickets))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, save_user_message))
    app.add_handler(MessageHandler(
        (filters.PHOTO | filters.VOICE | filters.VIDEO | filters.Document.ALL) & filters.ChatType.PRIVATE,
        save_user_media,
    ))
    app.add_handler(MessageHandler(filters.Regex("^[1-5]$") & filters.ChatType.PRIVATE, handle_feedback))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")

    scheduler = BackgroundScheduler()
    scheduler.add_job(auto_close_inactive, "interval", minutes=30)

    def reload_locations():
        global LOCATIONS, BUSINESS_OPTIONS
        try:
            mtime = os.path.getmtime("locations.json")
            if hasattr(reload_locations, "last_mtime"):
                if mtime > reload_locations.last_mtime:
                    LOCATIONS = load_locations()
                    BUSINESS_OPTIONS = list(LOCATIONS.keys())
                    logging.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–∫–∞—Ü–∏–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            reload_locations.last_mtime = mtime
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ locations.json: {e}")

    def reload_settings():
        global SETTINGS
        try:
            mtime = os.path.getmtime("settings.json")
            if hasattr(reload_settings, "last_mtime"):
                if mtime > reload_settings.last_mtime:
                    SETTINGS = load_settings()
                    logging.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            reload_settings.last_mtime = mtime
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ settings.json: {e}")

    scheduler.add_job(reload_locations, "interval", seconds=10)
    scheduler.add_job(reload_settings, "interval", seconds=10)
    scheduler.start()

    app.run_polling()
